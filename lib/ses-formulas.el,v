head	1.1;
access;
symbols;
locks
	qx29999:1.1; strict;
comment	@; @;


1.1
date	2005.05.02.08.06.36;	author qx29999;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@(defun worktime-make-hhmm (hours minutes)
  ;; HOURS and MINUTES are both integers.
  ;; MINUTES *must* be positive!
  (let ((m (% minutes 60))
        (h (+ hours (floor minutes 60))))
    (+ (* h 100) m)))

;; (worktime-make-hhmm 1 50)
;; (worktime-make-hhmm 1 65)
;; (worktime-make-hhmm 1 185)
;; (worktime-make-hhmm 0 05)
;; (worktime-make-hhmm -5 59)

(defun worktime-hhmm-hours (hhmm)
  (truncate hhmm 100))

(defun worktime-hhmm-minutes (hhmm)
  (abs (% hhmm 100)))
;; (worktime-hhmm-minutes -30)

(defun worktime-decompose-hhmm (hhmm)
  (let ((h (truncate hhmm 100))
        (m (% hhmm 100)))
    (list h (if (zerop h) m (abs m)))))
;; (worktime-decompose-hhmm -30)
;; (worktime-decompose-hhmm 30)
;; (worktime-decompose-hhmm -130)
;; (worktime-decompose-hhmm 130)

;; (defun worktime-time-printer (hhmm)
;;   (cond 
;;    ((null hhmm) "")
;;    ((integerp hhmm)
;;     (list (format "%02d:%02d"
;;                   (worktime-hhmm-hours hhmm)
;;                   (worktime-hhmm-minutes hhmm))))
;;    (t (list (format "%s" hhmm)))))

(defun worktime-time-printer (hhmm)
  (cond 
   ((null hhmm) "")
   ((integerp hhmm)
    (list (apply 'format "%02d:%02d"
                 (worktime-decompose-hhmm hhmm))))
   (t (list (format "%s" hhmm)))))

;; (worktime-time-printer nil)
;; (worktime-time-printer 15450)
;; (worktime-time-printer 5450)
;; (worktime-time-printer 150)
;; (worktime-time-printer 0)
;; (worktime-time-printer 5)
;; (worktime-time-printer 050)
;; (worktime-time-printer 105)
;; (worktime-time-printer -15450)
;; (worktime-time-printer -150)
;; (worktime-time-printer -30)


(defun worktime-hhmm-to-minutes (hhmm)
  (+ (* 60 (worktime-hhmm-hours hhmm))
     (worktime-hhmm-minutes hhmm)))

;; From cl-extra.el
(defun worktime-signum (a)
  "Return 1 if A is positive, -1 if negative, 0 if zero."
  (cond ((> a 0) 1) ((< a 0) -1) (t 0)))

(defun worktime-time-diff (hhmm2 hhmm1)
  (cond ((and (integerp hhmm1) (integerp hhmm2))
         (let ((dmin (- (worktime-hhmm-to-minutes hhmm2)
                        (worktime-hhmm-to-minutes hhmm1))))
           (* (worktime-signum dmin)
              (worktime-make-hhmm 0 (abs dmin)))))
        (t nil)))
;; (worktime-time-diff 0030 1830)

(defun worktime-time-add (hhmm2 hhmm1)
  (cond ((and (integerp hhmm1) (integerp hhmm2))
         (worktime-make-hhmm 0 (+ (worktime-hhmm-to-minutes hhmm2)
                                  (worktime-hhmm-to-minutes hhmm1))))
        (t nil)))

;; Convert HHMM to decimal
(defun worktime-hm2dec (time)
  (if (numberp time)
      (let ((h (% (/ time 100) 100))
            (m (% time 100)))
        (+ h (/ (%  m 60) 60.0)))
    nil))
;; (worktime-hm2dec 116)
;; Convert decimal to HHMM
(defun worktime-dec2hm (time)
  (if (numberp time)
      (let* ((h (truncate time))
             (m (* (- time h) 60)))
        (round (+ (* h 100) m)))
    nil))
;; (worktime-dec2hm 1.27)
;; (worktime-dec2hm 154.83)

(setq safe-functions '(worktime-time-printer
                       worktime-time-add
                       worktime-time-diff
                       worktime-hm2dec
                       worktime-dec2hm))

;; (worktime-hm2dec 859)
;; (worktime-hm2dec (worktime-time-diff (worktime-time-diff 1845 830) 45))

(provide 'ses-formulas)
@
